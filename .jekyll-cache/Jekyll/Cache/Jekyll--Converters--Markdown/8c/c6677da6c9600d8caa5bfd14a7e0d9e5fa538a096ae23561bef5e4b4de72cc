I".0<h1 id="introduction">Introduction</h1>
<p>In this post I will compare performances of 3 commonly used list data structure in java â€“ Linked List, Array List, Vector.</p>
<h1 id="java-list-interface">Java List<E> interface</E></h1>
<p>The <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">List&lt;E&gt;</a> interface is a member of Java Collections framework. It is an ordered collection of objects which provides user to control where in the list each element is inserted. There are multiple implementations of List<E> interface but we will focus on [ArrayList&lt;E&gt;](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html), [LinkedList&lt;E&gt;](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html) and [Vector&lt;E&gt;](https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html).</E></p>
<h1 id="setup">Setup</h1>
<p>I am running my code in a <code class="highlighter-rouge">MacBook Pro (Retina, 13-inch, Mid 2014)</code>, <code class="highlighter-rouge">2.6 GHz Intel Core i5</code> and <code class="highlighter-rouge">8 GB 1600 MHz DDR3</code> RAM. I am using IntelliJ IDE to run and debug my Java code. We will compare add, remove and sort operations since they are the most common operations performed on a list.</p>

<p>For the purpose of this experimentation, we assume that <code class="highlighter-rouge">Math.random()</code> takes constant time and use it to generate integers to be added to the list.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Integer</span> <span class="no">LIMIT</span> <span class="o">=</span> <span class="mi">100000</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addNumbersToList</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">LIMIT</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()));</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>We also use <code class="highlighter-rouge">Math.random()</code> to generate integers to be removed from the list. This also emulates the real world scenario where the element to be removed from the list is not in the list (The worst case scenario for removal of an element from a list).</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Integer</span> <span class="no">LIMIT</span> <span class="o">=</span> <span class="mi">100000</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">removeNumbersFromList</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">LIMIT</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()));</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>For sorting we would use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html#sort-java.util.Comparator-">List.sort(Comparator&lt;? super E&gt; c)</a> method. Following is the driver code</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Create 3 lists</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">linkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">arrayList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">vector</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Vector</span><span class="o">&lt;&gt;();</span>

    <span class="c1">// Add elements for lists</span>
    <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">addNumbersToList</span><span class="o">(</span><span class="n">linkedList</span><span class="o">);</span>
    <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">addNumbersToList</span><span class="o">(</span><span class="n">arrayList</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">addNumbersToList</span><span class="o">(</span><span class="n">vector</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="c1">// sort list elements</span>
    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">linkedList</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">arrayList</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">vector</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="c1">// remove elements from the list</span>
    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">removeNumbersFromList</span><span class="o">(</span><span class="n">linkedList</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">removeNumbersFromList</span><span class="o">(</span><span class="n">arrayList</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

    <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
    <span class="n">removeNumbersFromList</span><span class="o">(</span><span class="n">vector</span><span class="o">);</span>
    <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</code></pre></div></div>

<p>Since my java code isnâ€™t the only process running on my computer, we run it 3 times and do the final comparisons</p>

<h1 id="comparison">Comparison</h1>
<h3 id="add-operation">Add operation</h3>
<p>ArrayList seems to be the winner in add operation. While adding in linked list involves traversing to the end then adding the element, in arraylist it is just getting the last index and it in array almost constant time unless when the array needs resizing.</p>

<p><img src="img/addOperation.png" align="middle" height="400" /></p>

<h3 id="remove-operation">Remove operation</h3>
<p>Linked list is a clear winner by wide margins here. Remove operation for linked list involves searching the element in list <code class="highlighter-rouge">O(n)</code> and manipulating pointers to remove element from list <code class="highlighter-rouge">O(1)</code>. While in Array list removal involves searching the element to be removed and moving all the elements one space ahead.
<img src="img/removeOperation.png" align="middle" height="400" /></p>

<h3 id="sort-operation">Sort operation</h3>
<p>Linked list is performing poorly here, since swapping element also involves pointer manipulations of the nodes in list.
<img src="img/sortOperation.png" align="middle" height="400" /></p>

<h1 id="conclusion">Conclusion</h1>
<ol>
  <li>LinkedList should be chosen if your use case involves addition and removal of elements.</li>
  <li>ArrayList should be chosen if your use case needs elements to be sorted frequently.</li>
</ol>
:ET